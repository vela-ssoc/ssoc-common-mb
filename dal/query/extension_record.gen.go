// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/ssoc-common-mb/dal/model"
)

func newExtensionRecord(db *gorm.DB, opts ...gen.DOOption) extensionRecord {
	_extensionRecord := extensionRecord{}

	_extensionRecord.extensionRecordDo.UseDB(db, opts...)
	_extensionRecord.extensionRecordDo.UseModel(&model.ExtensionRecord{})

	tableName := _extensionRecord.extensionRecordDo.TableName()
	_extensionRecord.ALL = field.NewAsterisk(tableName)
	_extensionRecord.ID = field.NewInt64(tableName, "id")
	_extensionRecord.ExtensionID = field.NewInt64(tableName, "extension_id")
	_extensionRecord.Version = field.NewInt64(tableName, "version")
	_extensionRecord.Content = field.NewString(tableName, "content")
	_extensionRecord.ContentSHA1 = field.NewString(tableName, "content_sha1")
	_extensionRecord.CreatedBy = field.NewField(tableName, "created_by")
	_extensionRecord.CreatedAt = field.NewTime(tableName, "updated_at")

	_extensionRecord.fillFieldMap()

	return _extensionRecord
}

type extensionRecord struct {
	extensionRecordDo extensionRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	ExtensionID field.Int64
	Version     field.Int64
	Content     field.String
	ContentSHA1 field.String
	CreatedBy   field.Field
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (e extensionRecord) Table(newTableName string) *extensionRecord {
	e.extensionRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e extensionRecord) As(alias string) *extensionRecord {
	e.extensionRecordDo.DO = *(e.extensionRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *extensionRecord) updateTableName(table string) *extensionRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.ExtensionID = field.NewInt64(table, "extension_id")
	e.Version = field.NewInt64(table, "version")
	e.Content = field.NewString(table, "content")
	e.ContentSHA1 = field.NewString(table, "content_sha1")
	e.CreatedBy = field.NewField(table, "created_by")
	e.CreatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *extensionRecord) WithContext(ctx context.Context) *extensionRecordDo {
	return e.extensionRecordDo.WithContext(ctx)
}

func (e extensionRecord) TableName() string { return e.extensionRecordDo.TableName() }

func (e extensionRecord) Alias() string { return e.extensionRecordDo.Alias() }

func (e extensionRecord) Columns(cols ...field.Expr) gen.Columns {
	return e.extensionRecordDo.Columns(cols...)
}

func (e *extensionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *extensionRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["extension_id"] = e.ExtensionID
	e.fieldMap["version"] = e.Version
	e.fieldMap["content"] = e.Content
	e.fieldMap["content_sha1"] = e.ContentSHA1
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_at"] = e.CreatedAt
}

func (e extensionRecord) clone(db *gorm.DB) extensionRecord {
	e.extensionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e extensionRecord) replaceDB(db *gorm.DB) extensionRecord {
	e.extensionRecordDo.ReplaceDB(db)
	return e
}

type extensionRecordDo struct{ gen.DO }

func (e extensionRecordDo) Debug() *extensionRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e extensionRecordDo) WithContext(ctx context.Context) *extensionRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e extensionRecordDo) ReadDB() *extensionRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e extensionRecordDo) WriteDB() *extensionRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e extensionRecordDo) Session(config *gorm.Session) *extensionRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e extensionRecordDo) Clauses(conds ...clause.Expression) *extensionRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e extensionRecordDo) Returning(value interface{}, columns ...string) *extensionRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e extensionRecordDo) Not(conds ...gen.Condition) *extensionRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e extensionRecordDo) Or(conds ...gen.Condition) *extensionRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e extensionRecordDo) Select(conds ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e extensionRecordDo) Where(conds ...gen.Condition) *extensionRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e extensionRecordDo) Order(conds ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e extensionRecordDo) Distinct(cols ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e extensionRecordDo) Omit(cols ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e extensionRecordDo) Join(table schema.Tabler, on ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e extensionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e extensionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e extensionRecordDo) Group(cols ...field.Expr) *extensionRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e extensionRecordDo) Having(conds ...gen.Condition) *extensionRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e extensionRecordDo) Limit(limit int) *extensionRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e extensionRecordDo) Offset(offset int) *extensionRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e extensionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *extensionRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e extensionRecordDo) Unscoped() *extensionRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e extensionRecordDo) Create(values ...*model.ExtensionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e extensionRecordDo) CreateInBatches(values []*model.ExtensionRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e extensionRecordDo) Save(values ...*model.ExtensionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e extensionRecordDo) First() (*model.ExtensionRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtensionRecord), nil
	}
}

func (e extensionRecordDo) Take() (*model.ExtensionRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtensionRecord), nil
	}
}

func (e extensionRecordDo) Last() (*model.ExtensionRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtensionRecord), nil
	}
}

func (e extensionRecordDo) Find() ([]*model.ExtensionRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExtensionRecord), err
}

func (e extensionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExtensionRecord, err error) {
	buf := make([]*model.ExtensionRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e extensionRecordDo) FindInBatches(result *[]*model.ExtensionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e extensionRecordDo) Attrs(attrs ...field.AssignExpr) *extensionRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e extensionRecordDo) Assign(attrs ...field.AssignExpr) *extensionRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e extensionRecordDo) Joins(fields ...field.RelationField) *extensionRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e extensionRecordDo) Preload(fields ...field.RelationField) *extensionRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e extensionRecordDo) FirstOrInit() (*model.ExtensionRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtensionRecord), nil
	}
}

func (e extensionRecordDo) FirstOrCreate() (*model.ExtensionRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtensionRecord), nil
	}
}

func (e extensionRecordDo) FindByPage(offset int, limit int) (result []*model.ExtensionRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e extensionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e extensionRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e extensionRecordDo) Delete(models ...*model.ExtensionRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *extensionRecordDo) withDO(do gen.Dao) *extensionRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}
