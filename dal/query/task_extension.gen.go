// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb/dal/model"
)

func newTaskExtension(db *gorm.DB, opts ...gen.DOOption) taskExtension {
	_taskExtension := taskExtension{}

	_taskExtension.taskExtensionDo.UseDB(db, opts...)
	_taskExtension.taskExtensionDo.UseModel(&model.TaskExtension{})

	tableName := _taskExtension.taskExtensionDo.TableName()
	_taskExtension.ALL = field.NewAsterisk(tableName)
	_taskExtension.ID = field.NewInt64(tableName, "id")
	_taskExtension.Name = field.NewString(tableName, "name")
	_taskExtension.Intro = field.NewString(tableName, "intro")
	_taskExtension.Code = field.NewString(tableName, "code")
	_taskExtension.CodeSHA1 = field.NewString(tableName, "code_sha1")
	_taskExtension.ContentQuote = field.NewField(tableName, "content_quote")
	_taskExtension.StepDone = field.NewBool(tableName, "released")
	_taskExtension.Enabled = field.NewBool(tableName, "enabled")
	_taskExtension.Cron = field.NewString(tableName, "cron")
	_taskExtension.SpecificTimes = field.NewField(tableName, "specific_times")
	_taskExtension.Timeout = field.NewField(tableName, "timeout")
	_taskExtension.PushSize = field.NewInt(tableName, "push_size")
	_taskExtension.Filters = field.NewField(tableName, "filters")
	_taskExtension.Excludes = field.NewField(tableName, "excludes")
	_taskExtension.ExecID = field.NewInt64(tableName, "exec_id")
	_taskExtension.Status = field.NewField(tableName, "status")
	_taskExtension.Finished = field.NewBool(tableName, "finished")
	_taskExtension.CreatedBy = field.NewField(tableName, "created_by")
	_taskExtension.UpdatedBy = field.NewField(tableName, "updated_by")
	_taskExtension.CreatedAt = field.NewTime(tableName, "created_at")
	_taskExtension.UpdatedAt = field.NewTime(tableName, "updated_at")

	_taskExtension.fillFieldMap()

	return _taskExtension
}

type taskExtension struct {
	taskExtensionDo taskExtensionDo

	ALL           field.Asterisk
	ID            field.Int64
	Name          field.String
	Intro         field.String
	Code          field.String
	CodeSHA1      field.String
	ContentQuote  field.Field
	StepDone      field.Bool
	Enabled       field.Bool
	Cron          field.String
	SpecificTimes field.Field
	Timeout       field.Field
	PushSize      field.Int
	Filters       field.Field
	Excludes      field.Field
	ExecID        field.Int64
	Status        field.Field
	Finished      field.Bool
	CreatedBy     field.Field
	UpdatedBy     field.Field
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t taskExtension) Table(newTableName string) *taskExtension {
	t.taskExtensionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskExtension) As(alias string) *taskExtension {
	t.taskExtensionDo.DO = *(t.taskExtensionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskExtension) updateTableName(table string) *taskExtension {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Intro = field.NewString(table, "intro")
	t.Code = field.NewString(table, "code")
	t.CodeSHA1 = field.NewString(table, "code_sha1")
	t.ContentQuote = field.NewField(table, "content_quote")
	t.StepDone = field.NewBool(table, "released")
	t.Enabled = field.NewBool(table, "enabled")
	t.Cron = field.NewString(table, "cron")
	t.SpecificTimes = field.NewField(table, "specific_times")
	t.Timeout = field.NewField(table, "timeout")
	t.PushSize = field.NewInt(table, "push_size")
	t.Filters = field.NewField(table, "filters")
	t.Excludes = field.NewField(table, "excludes")
	t.ExecID = field.NewInt64(table, "exec_id")
	t.Status = field.NewField(table, "status")
	t.Finished = field.NewBool(table, "finished")
	t.CreatedBy = field.NewField(table, "created_by")
	t.UpdatedBy = field.NewField(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *taskExtension) WithContext(ctx context.Context) *taskExtensionDo {
	return t.taskExtensionDo.WithContext(ctx)
}

func (t taskExtension) TableName() string { return t.taskExtensionDo.TableName() }

func (t taskExtension) Alias() string { return t.taskExtensionDo.Alias() }

func (t taskExtension) Columns(cols ...field.Expr) gen.Columns {
	return t.taskExtensionDo.Columns(cols...)
}

func (t *taskExtension) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskExtension) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 21)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["intro"] = t.Intro
	t.fieldMap["code"] = t.Code
	t.fieldMap["code_sha1"] = t.CodeSHA1
	t.fieldMap["content_quote"] = t.ContentQuote
	t.fieldMap["released"] = t.StepDone
	t.fieldMap["enabled"] = t.Enabled
	t.fieldMap["cron"] = t.Cron
	t.fieldMap["specific_times"] = t.SpecificTimes
	t.fieldMap["timeout"] = t.Timeout
	t.fieldMap["push_size"] = t.PushSize
	t.fieldMap["filters"] = t.Filters
	t.fieldMap["excludes"] = t.Excludes
	t.fieldMap["exec_id"] = t.ExecID
	t.fieldMap["status"] = t.Status
	t.fieldMap["finished"] = t.Finished
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t taskExtension) clone(db *gorm.DB) taskExtension {
	t.taskExtensionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskExtension) replaceDB(db *gorm.DB) taskExtension {
	t.taskExtensionDo.ReplaceDB(db)
	return t
}

type taskExtensionDo struct{ gen.DO }

func (t taskExtensionDo) Debug() *taskExtensionDo {
	return t.withDO(t.DO.Debug())
}

func (t taskExtensionDo) WithContext(ctx context.Context) *taskExtensionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskExtensionDo) ReadDB() *taskExtensionDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskExtensionDo) WriteDB() *taskExtensionDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskExtensionDo) Session(config *gorm.Session) *taskExtensionDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskExtensionDo) Clauses(conds ...clause.Expression) *taskExtensionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskExtensionDo) Returning(value interface{}, columns ...string) *taskExtensionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskExtensionDo) Not(conds ...gen.Condition) *taskExtensionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskExtensionDo) Or(conds ...gen.Condition) *taskExtensionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskExtensionDo) Select(conds ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskExtensionDo) Where(conds ...gen.Condition) *taskExtensionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskExtensionDo) Order(conds ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskExtensionDo) Distinct(cols ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskExtensionDo) Omit(cols ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskExtensionDo) Join(table schema.Tabler, on ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskExtensionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskExtensionDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskExtensionDo) Group(cols ...field.Expr) *taskExtensionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskExtensionDo) Having(conds ...gen.Condition) *taskExtensionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskExtensionDo) Limit(limit int) *taskExtensionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskExtensionDo) Offset(offset int) *taskExtensionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskExtensionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskExtensionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskExtensionDo) Unscoped() *taskExtensionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskExtensionDo) Create(values ...*model.TaskExtension) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskExtensionDo) CreateInBatches(values []*model.TaskExtension, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskExtensionDo) Save(values ...*model.TaskExtension) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskExtensionDo) First() (*model.TaskExtension, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExtension), nil
	}
}

func (t taskExtensionDo) Take() (*model.TaskExtension, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExtension), nil
	}
}

func (t taskExtensionDo) Last() (*model.TaskExtension, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExtension), nil
	}
}

func (t taskExtensionDo) Find() ([]*model.TaskExtension, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskExtension), err
}

func (t taskExtensionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskExtension, err error) {
	buf := make([]*model.TaskExtension, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskExtensionDo) FindInBatches(result *[]*model.TaskExtension, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskExtensionDo) Attrs(attrs ...field.AssignExpr) *taskExtensionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskExtensionDo) Assign(attrs ...field.AssignExpr) *taskExtensionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskExtensionDo) Joins(fields ...field.RelationField) *taskExtensionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskExtensionDo) Preload(fields ...field.RelationField) *taskExtensionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskExtensionDo) FirstOrInit() (*model.TaskExtension, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExtension), nil
	}
}

func (t taskExtensionDo) FirstOrCreate() (*model.TaskExtension, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExtension), nil
	}
}

func (t taskExtensionDo) FindByPage(offset int, limit int) (result []*model.TaskExtension, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskExtensionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskExtensionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskExtensionDo) Delete(models ...*model.TaskExtension) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskExtensionDo) withDO(do gen.Dao) *taskExtensionDo {
	t.DO = *do.(*gen.DO)
	return t
}
