// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/ssoc-common-mb/dal/model"
)

func newSIEMServer(db *gorm.DB, opts ...gen.DOOption) sIEMServer {
	_sIEMServer := sIEMServer{}

	_sIEMServer.sIEMServerDo.UseDB(db, opts...)
	_sIEMServer.sIEMServerDo.UseModel(&model.SIEMServer{})

	tableName := _sIEMServer.sIEMServerDo.TableName()
	_sIEMServer.ALL = field.NewAsterisk(tableName)
	_sIEMServer.ID = field.NewInt64(tableName, "id")
	_sIEMServer.Name = field.NewString(tableName, "name")
	_sIEMServer.URL = field.NewString(tableName, "url")
	_sIEMServer.Token = field.NewString(tableName, "token")
	_sIEMServer.CreatedAt = field.NewTime(tableName, "updated_at")
	_sIEMServer.UpdatedAt = field.NewTime(tableName, "created_at")

	_sIEMServer.fillFieldMap()

	return _sIEMServer
}

type sIEMServer struct {
	sIEMServerDo sIEMServerDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	Name      field.String // 名字
	URL       field.String // 服务器地址
	Token     field.String // 认证令牌
	CreatedAt field.Time   // 更新时间
	UpdatedAt field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (s sIEMServer) Table(newTableName string) *sIEMServer {
	s.sIEMServerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sIEMServer) As(alias string) *sIEMServer {
	s.sIEMServerDo.DO = *(s.sIEMServerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sIEMServer) updateTableName(table string) *sIEMServer {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.URL = field.NewString(table, "url")
	s.Token = field.NewString(table, "token")
	s.CreatedAt = field.NewTime(table, "updated_at")
	s.UpdatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *sIEMServer) WithContext(ctx context.Context) *sIEMServerDo {
	return s.sIEMServerDo.WithContext(ctx)
}

func (s sIEMServer) TableName() string { return s.sIEMServerDo.TableName() }

func (s sIEMServer) Alias() string { return s.sIEMServerDo.Alias() }

func (s sIEMServer) Columns(cols ...field.Expr) gen.Columns { return s.sIEMServerDo.Columns(cols...) }

func (s *sIEMServer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sIEMServer) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["url"] = s.URL
	s.fieldMap["token"] = s.Token
	s.fieldMap["updated_at"] = s.CreatedAt
	s.fieldMap["created_at"] = s.UpdatedAt
}

func (s sIEMServer) clone(db *gorm.DB) sIEMServer {
	s.sIEMServerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sIEMServer) replaceDB(db *gorm.DB) sIEMServer {
	s.sIEMServerDo.ReplaceDB(db)
	return s
}

type sIEMServerDo struct{ gen.DO }

func (s sIEMServerDo) Debug() *sIEMServerDo {
	return s.withDO(s.DO.Debug())
}

func (s sIEMServerDo) WithContext(ctx context.Context) *sIEMServerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sIEMServerDo) ReadDB() *sIEMServerDo {
	return s.Clauses(dbresolver.Read)
}

func (s sIEMServerDo) WriteDB() *sIEMServerDo {
	return s.Clauses(dbresolver.Write)
}

func (s sIEMServerDo) Session(config *gorm.Session) *sIEMServerDo {
	return s.withDO(s.DO.Session(config))
}

func (s sIEMServerDo) Clauses(conds ...clause.Expression) *sIEMServerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sIEMServerDo) Returning(value interface{}, columns ...string) *sIEMServerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sIEMServerDo) Not(conds ...gen.Condition) *sIEMServerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sIEMServerDo) Or(conds ...gen.Condition) *sIEMServerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sIEMServerDo) Select(conds ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sIEMServerDo) Where(conds ...gen.Condition) *sIEMServerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sIEMServerDo) Order(conds ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sIEMServerDo) Distinct(cols ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sIEMServerDo) Omit(cols ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sIEMServerDo) Join(table schema.Tabler, on ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sIEMServerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sIEMServerDo) RightJoin(table schema.Tabler, on ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sIEMServerDo) Group(cols ...field.Expr) *sIEMServerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sIEMServerDo) Having(conds ...gen.Condition) *sIEMServerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sIEMServerDo) Limit(limit int) *sIEMServerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sIEMServerDo) Offset(offset int) *sIEMServerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sIEMServerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sIEMServerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sIEMServerDo) Unscoped() *sIEMServerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sIEMServerDo) Create(values ...*model.SIEMServer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sIEMServerDo) CreateInBatches(values []*model.SIEMServer, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sIEMServerDo) Save(values ...*model.SIEMServer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sIEMServerDo) First() (*model.SIEMServer, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SIEMServer), nil
	}
}

func (s sIEMServerDo) Take() (*model.SIEMServer, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SIEMServer), nil
	}
}

func (s sIEMServerDo) Last() (*model.SIEMServer, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SIEMServer), nil
	}
}

func (s sIEMServerDo) Find() ([]*model.SIEMServer, error) {
	result, err := s.DO.Find()
	return result.([]*model.SIEMServer), err
}

func (s sIEMServerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SIEMServer, err error) {
	buf := make([]*model.SIEMServer, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sIEMServerDo) FindInBatches(result *[]*model.SIEMServer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sIEMServerDo) Attrs(attrs ...field.AssignExpr) *sIEMServerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sIEMServerDo) Assign(attrs ...field.AssignExpr) *sIEMServerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sIEMServerDo) Joins(fields ...field.RelationField) *sIEMServerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sIEMServerDo) Preload(fields ...field.RelationField) *sIEMServerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sIEMServerDo) FirstOrInit() (*model.SIEMServer, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SIEMServer), nil
	}
}

func (s sIEMServerDo) FirstOrCreate() (*model.SIEMServer, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SIEMServer), nil
	}
}

func (s sIEMServerDo) FindByPage(offset int, limit int) (result []*model.SIEMServer, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sIEMServerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sIEMServerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sIEMServerDo) Delete(models ...*model.SIEMServer) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sIEMServerDo) withDO(do gen.Dao) *sIEMServerDo {
	s.DO = *do.(*gen.DO)
	return s
}
