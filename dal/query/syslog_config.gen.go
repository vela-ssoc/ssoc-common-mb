// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/ssoc-common-mb/dal/model"
)

func newSyslogConfig(db *gorm.DB, opts ...gen.DOOption) syslogConfig {
	_syslogConfig := syslogConfig{}

	_syslogConfig.syslogConfigDo.UseDB(db, opts...)
	_syslogConfig.syslogConfigDo.UseModel(&model.SyslogConfig{})

	tableName := _syslogConfig.syslogConfigDo.TableName()
	_syslogConfig.ALL = field.NewAsterisk(tableName)
	_syslogConfig.ID = field.NewInt64(tableName, "id")
	_syslogConfig.Enabled = field.NewBool(tableName, "enabled")
	_syslogConfig.AppName = field.NewString(tableName, "app_name")
	_syslogConfig.Protocol = field.NewString(tableName, "protocol")
	_syslogConfig.Address = field.NewString(tableName, "address")

	_syslogConfig.fillFieldMap()

	return _syslogConfig
}

type syslogConfig struct {
	syslogConfigDo syslogConfigDo

	ALL      field.Asterisk
	ID       field.Int64  // ID
	Enabled  field.Bool   // 是否启用
	AppName  field.String // 应用名
	Protocol field.String // 协议
	Address  field.String // 服务器地址

	fieldMap map[string]field.Expr
}

func (s syslogConfig) Table(newTableName string) *syslogConfig {
	s.syslogConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syslogConfig) As(alias string) *syslogConfig {
	s.syslogConfigDo.DO = *(s.syslogConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syslogConfig) updateTableName(table string) *syslogConfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Enabled = field.NewBool(table, "enabled")
	s.AppName = field.NewString(table, "app_name")
	s.Protocol = field.NewString(table, "protocol")
	s.Address = field.NewString(table, "address")

	s.fillFieldMap()

	return s
}

func (s *syslogConfig) WithContext(ctx context.Context) *syslogConfigDo {
	return s.syslogConfigDo.WithContext(ctx)
}

func (s syslogConfig) TableName() string { return s.syslogConfigDo.TableName() }

func (s syslogConfig) Alias() string { return s.syslogConfigDo.Alias() }

func (s syslogConfig) Columns(cols ...field.Expr) gen.Columns {
	return s.syslogConfigDo.Columns(cols...)
}

func (s *syslogConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syslogConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["enabled"] = s.Enabled
	s.fieldMap["app_name"] = s.AppName
	s.fieldMap["protocol"] = s.Protocol
	s.fieldMap["address"] = s.Address
}

func (s syslogConfig) clone(db *gorm.DB) syslogConfig {
	s.syslogConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syslogConfig) replaceDB(db *gorm.DB) syslogConfig {
	s.syslogConfigDo.ReplaceDB(db)
	return s
}

type syslogConfigDo struct{ gen.DO }

func (s syslogConfigDo) Debug() *syslogConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s syslogConfigDo) WithContext(ctx context.Context) *syslogConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syslogConfigDo) ReadDB() *syslogConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s syslogConfigDo) WriteDB() *syslogConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s syslogConfigDo) Session(config *gorm.Session) *syslogConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s syslogConfigDo) Clauses(conds ...clause.Expression) *syslogConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syslogConfigDo) Returning(value interface{}, columns ...string) *syslogConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syslogConfigDo) Not(conds ...gen.Condition) *syslogConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syslogConfigDo) Or(conds ...gen.Condition) *syslogConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syslogConfigDo) Select(conds ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syslogConfigDo) Where(conds ...gen.Condition) *syslogConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syslogConfigDo) Order(conds ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syslogConfigDo) Distinct(cols ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syslogConfigDo) Omit(cols ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syslogConfigDo) Join(table schema.Tabler, on ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syslogConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syslogConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syslogConfigDo) Group(cols ...field.Expr) *syslogConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syslogConfigDo) Having(conds ...gen.Condition) *syslogConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syslogConfigDo) Limit(limit int) *syslogConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syslogConfigDo) Offset(offset int) *syslogConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syslogConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *syslogConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syslogConfigDo) Unscoped() *syslogConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syslogConfigDo) Create(values ...*model.SyslogConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syslogConfigDo) CreateInBatches(values []*model.SyslogConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syslogConfigDo) Save(values ...*model.SyslogConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syslogConfigDo) First() (*model.SyslogConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyslogConfig), nil
	}
}

func (s syslogConfigDo) Take() (*model.SyslogConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyslogConfig), nil
	}
}

func (s syslogConfigDo) Last() (*model.SyslogConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyslogConfig), nil
	}
}

func (s syslogConfigDo) Find() ([]*model.SyslogConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyslogConfig), err
}

func (s syslogConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyslogConfig, err error) {
	buf := make([]*model.SyslogConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syslogConfigDo) FindInBatches(result *[]*model.SyslogConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syslogConfigDo) Attrs(attrs ...field.AssignExpr) *syslogConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syslogConfigDo) Assign(attrs ...field.AssignExpr) *syslogConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syslogConfigDo) Joins(fields ...field.RelationField) *syslogConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syslogConfigDo) Preload(fields ...field.RelationField) *syslogConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syslogConfigDo) FirstOrInit() (*model.SyslogConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyslogConfig), nil
	}
}

func (s syslogConfigDo) FirstOrCreate() (*model.SyslogConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyslogConfig), nil
	}
}

func (s syslogConfigDo) FindByPage(offset int, limit int) (result []*model.SyslogConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syslogConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syslogConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syslogConfigDo) Delete(models ...*model.SyslogConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syslogConfigDo) withDO(do gen.Dao) *syslogConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
