// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb/dal/model"
)

func newCmdb2(db *gorm.DB, opts ...gen.DOOption) cmdb2 {
	_cmdb2 := cmdb2{}

	_cmdb2.cmdb2Do.UseDB(db, opts...)
	_cmdb2.cmdb2Do.UseModel(&model.Cmdb2{})

	tableName := _cmdb2.cmdb2Do.TableName()
	_cmdb2.ALL = field.NewAsterisk(tableName)
	_cmdb2.ID = field.NewInt64(tableName, "id")
	_cmdb2.Inet = field.NewString(tableName, "inet")
	_cmdb2.AppCluster = field.NewString(tableName, "app_cluster")
	_cmdb2.AppDuty = field.NewField(tableName, "app_duty")
	_cmdb2.AppID = field.NewString(tableName, "appid")
	_cmdb2.AppName = field.NewString(tableName, "appname")
	_cmdb2.AutoRenew = field.NewString(tableName, "auto_renew")
	_cmdb2.AssetID = field.NewString(tableName, "asset_id")
	_cmdb2.AssetStatus = field.NewString(tableName, "asset_status")
	_cmdb2.BaoleijiIdentity = field.NewString(tableName, "baoleiji_identity")
	_cmdb2.BeetleService = field.NewString(tableName, "beetle_service")
	_cmdb2.BillingType = field.NewString(tableName, "billing_type")
	_cmdb2.Brand = field.NewString(tableName, "brand")
	_cmdb2.Business = field.NewString(tableName, "business")
	_cmdb2.BusinessEnv = field.NewString(tableName, "business_env")
	_cmdb2.ChargeMode = field.NewString(tableName, "charge_mode")
	_cmdb2.CIType = field.NewString(tableName, "ci_type")
	_cmdb2.CmcIP = field.NewString(tableName, "cmc_ip")
	_cmdb2.CncIP = field.NewString(tableName, "cnc_ip")
	_cmdb2.Comment = field.NewString(tableName, "comment")
	_cmdb2.CostDepCasID = field.NewString(tableName, "cost_dep_cas_id")
	_cmdb2.CPU = field.NewString(tableName, "cpu")
	_cmdb2.CPUCount = field.NewInt(tableName, "cpu_count")
	_cmdb2.CtcIP = field.NewString(tableName, "ctc_ip")
	_cmdb2.CreateDate = field.NewString(tableName, "create_date")
	_cmdb2.CreatedAt = field.NewString(tableName, "created_at")
	_cmdb2.CreatedTime = field.NewString(tableName, "created_time")
	_cmdb2.Deleted = field.NewString(tableName, "deleted")
	_cmdb2.Department = field.NewString(tableName, "department")
	_cmdb2.Description = field.NewString(tableName, "description")
	_cmdb2.DeviceSpec = field.NewString(tableName, "device_spec")
	_cmdb2.DockerCPUCount = field.NewString(tableName, "docker_cpu_count")
	_cmdb2.Env = field.NewString(tableName, "env")
	_cmdb2.ExpDate = field.NewString(tableName, "exp_date")
	_cmdb2.ExpiredAt = field.NewString(tableName, "expired_at")
	_cmdb2.ExternalID = field.NewString(tableName, "external_id")
	_cmdb2.FloatIP = field.NewField(tableName, "float_ip")
	_cmdb2.HardDisk = field.NewString(tableName, "harddisk")
	_cmdb2.HostIP = field.NewField(tableName, "host_ip")
	_cmdb2.HostType = field.NewString(tableName, "host_type")
	_cmdb2.Hostname = field.NewString(tableName, "hostname")
	_cmdb2.HostSN = field.NewString(tableName, "host_sn")
	_cmdb2.HyperThreading = field.NewString(tableName, "hyper_threading")
	_cmdb2.IDC = field.NewString(tableName, "idc")
	_cmdb2.IloIP = field.NewString(tableName, "ilo_ip")
	_cmdb2.Image = field.NewString(tableName, "image")
	_cmdb2.ImageVersion = field.NewString(tableName, "image_version")
	_cmdb2.InstanceID = field.NewString(tableName, "instance_id")
	_cmdb2.IPv6 = field.NewField(tableName, "ipv6")
	_cmdb2.ImportedAt = field.NewString(tableName, "imported_at")
	_cmdb2.InScalingGroup = field.NewString(tableName, "in_scaling_group")
	_cmdb2.InstanceType = field.NewString(tableName, "instance_type")
	_cmdb2.InternetMaxBandwidthOut = field.NewInt(tableName, "internet_max_bandwidth_out")
	_cmdb2.K8sCluster = field.NewString(tableName, "k8s_cluster")
	_cmdb2.KernelVersion = field.NewString(tableName, "kernel_version")
	_cmdb2.LogicCPUCount = field.NewInt(tableName, "logic_cpu_count")
	_cmdb2.MinionNotCheck = field.NewString(tableName, "minion_not_check")
	_cmdb2.Name = field.NewString(tableName, "name")
	_cmdb2.Namespace = field.NewString(tableName, "namespace")
	_cmdb2.NetOpen = field.NewString(tableName, "net_open")
	_cmdb2.OpDuty = field.NewField(tableName, "op_duty")
	_cmdb2.OpDutyBackup = field.NewField(tableName, "op_duty_backup")
	_cmdb2.OpDutyMain = field.NewField(tableName, "op_duty_main")
	_cmdb2.OpDutyStandby = field.NewField(tableName, "op_duty_standby")
	_cmdb2.OsArch = field.NewString(tableName, "os_arch")
	_cmdb2.OsType = field.NewString(tableName, "os_type")
	_cmdb2.OsVersion = field.NewString(tableName, "os_version")
	_cmdb2.PowerStates = field.NewString(tableName, "power_states")
	_cmdb2.PrivateIP = field.NewField(tableName, "private_ip")
	_cmdb2.PublicCloudID = field.NewString(tableName, "public_cloud_id")
	_cmdb2.PublicCloudIDC = field.NewString(tableName, "public_cloud_idc")
	_cmdb2.PrivateCloudIP = field.NewString(tableName, "private_cloud_ip")
	_cmdb2.PrivateCloudType = field.NewString(tableName, "private_cloud_type")
	_cmdb2.Rack = field.NewString(tableName, "rack")
	_cmdb2.RAID = field.NewString(tableName, "raid")
	_cmdb2.RAM = field.NewString(tableName, "ram")
	_cmdb2.RAMSize = field.NewString(tableName, "ram_size")
	_cmdb2.RdDutyMain = field.NewField(tableName, "rd_duty_main")
	_cmdb2.RdDutyMember = field.NewField(tableName, "rd_duty_member")
	_cmdb2.Region = field.NewString(tableName, "region")
	_cmdb2.ResourceLimits = field.NewString(tableName, "resource_limits")
	_cmdb2.ResourceRequests = field.NewString(tableName, "resource_requests")
	_cmdb2.SecurityInfo = field.NewString(tableName, "security_info")
	_cmdb2.Server = field.NewString(tableName, "server")
	_cmdb2.ServerRoom = field.NewString(tableName, "server_room")
	_cmdb2.SN = field.NewString(tableName, "sn")
	_cmdb2.ShutdownBehavior = field.NewString(tableName, "shutdown_behavior")
	_cmdb2.ShutdownMode = field.NewString(tableName, "shutdown_mode")
	_cmdb2.Status = field.NewString(tableName, "status")
	_cmdb2.SysDuty = field.NewField(tableName, "sys_duty")
	_cmdb2.Tags = field.NewField(tableName, "tags")
	_cmdb2.Throughput = field.NewInt(tableName, "throughput")
	_cmdb2.TradeType = field.NewString(tableName, "trade_type")
	_cmdb2.UpdateTime = field.NewString(tableName, "update_time")
	_cmdb2.UpdatedAt = field.NewString(tableName, "updated_at")
	_cmdb2.Use = field.NewString(tableName, "use")
	_cmdb2.UUID = field.NewString(tableName, "uuid")
	_cmdb2.VCPUCount = field.NewInt(tableName, "vcpu_count")
	_cmdb2.VMemSize = field.NewInt(tableName, "vmem_size")
	_cmdb2.VserverType = field.NewString(tableName, "vserver_type")
	_cmdb2.ZabbixNotCheck = field.NewString(tableName, "zabbix_not_check")
	_cmdb2.Zone = field.NewString(tableName, "zone")

	_cmdb2.fillFieldMap()

	return _cmdb2
}

type cmdb2 struct {
	cmdb2Do cmdb2Do

	ALL                     field.Asterisk
	ID                      field.Int64
	Inet                    field.String
	AppCluster              field.String
	AppDuty                 field.Field
	AppID                   field.String
	AppName                 field.String
	AutoRenew               field.String
	AssetID                 field.String
	AssetStatus             field.String
	BaoleijiIdentity        field.String
	BeetleService           field.String
	BillingType             field.String
	Brand                   field.String
	Business                field.String
	BusinessEnv             field.String
	ChargeMode              field.String
	CIType                  field.String
	CmcIP                   field.String
	CncIP                   field.String
	Comment                 field.String
	CostDepCasID            field.String
	CPU                     field.String
	CPUCount                field.Int
	CtcIP                   field.String
	CreateDate              field.String
	CreatedAt               field.String
	CreatedTime             field.String
	Deleted                 field.String
	Department              field.String
	Description             field.String
	DeviceSpec              field.String
	DockerCPUCount          field.String
	Env                     field.String
	ExpDate                 field.String
	ExpiredAt               field.String
	ExternalID              field.String
	FloatIP                 field.Field
	HardDisk                field.String
	HostIP                  field.Field
	HostType                field.String
	Hostname                field.String
	HostSN                  field.String
	HyperThreading          field.String
	IDC                     field.String
	IloIP                   field.String
	Image                   field.String
	ImageVersion            field.String
	InstanceID              field.String
	IPv6                    field.Field
	ImportedAt              field.String
	InScalingGroup          field.String
	InstanceType            field.String
	InternetMaxBandwidthOut field.Int
	K8sCluster              field.String
	KernelVersion           field.String
	LogicCPUCount           field.Int
	MinionNotCheck          field.String
	Name                    field.String
	Namespace               field.String
	NetOpen                 field.String
	OpDuty                  field.Field
	OpDutyBackup            field.Field
	OpDutyMain              field.Field
	OpDutyStandby           field.Field
	OsArch                  field.String
	OsType                  field.String
	OsVersion               field.String
	PowerStates             field.String
	PrivateIP               field.Field
	PublicCloudID           field.String
	PublicCloudIDC          field.String
	PrivateCloudIP          field.String
	PrivateCloudType        field.String
	Rack                    field.String
	RAID                    field.String
	RAM                     field.String
	RAMSize                 field.String
	RdDutyMain              field.Field
	RdDutyMember            field.Field
	Region                  field.String
	ResourceLimits          field.String
	ResourceRequests        field.String
	SecurityInfo            field.String
	Server                  field.String
	ServerRoom              field.String
	SN                      field.String
	ShutdownBehavior        field.String
	ShutdownMode            field.String
	Status                  field.String
	SysDuty                 field.Field
	Tags                    field.Field
	Throughput              field.Int
	TradeType               field.String
	UpdateTime              field.String
	UpdatedAt               field.String
	Use                     field.String
	UUID                    field.String
	VCPUCount               field.Int
	VMemSize                field.Int
	VserverType             field.String
	ZabbixNotCheck          field.String
	Zone                    field.String

	fieldMap map[string]field.Expr
}

func (c cmdb2) Table(newTableName string) *cmdb2 {
	c.cmdb2Do.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmdb2) As(alias string) *cmdb2 {
	c.cmdb2Do.DO = *(c.cmdb2Do.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmdb2) updateTableName(table string) *cmdb2 {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Inet = field.NewString(table, "inet")
	c.AppCluster = field.NewString(table, "app_cluster")
	c.AppDuty = field.NewField(table, "app_duty")
	c.AppID = field.NewString(table, "appid")
	c.AppName = field.NewString(table, "appname")
	c.AutoRenew = field.NewString(table, "auto_renew")
	c.AssetID = field.NewString(table, "asset_id")
	c.AssetStatus = field.NewString(table, "asset_status")
	c.BaoleijiIdentity = field.NewString(table, "baoleiji_identity")
	c.BeetleService = field.NewString(table, "beetle_service")
	c.BillingType = field.NewString(table, "billing_type")
	c.Brand = field.NewString(table, "brand")
	c.Business = field.NewString(table, "business")
	c.BusinessEnv = field.NewString(table, "business_env")
	c.ChargeMode = field.NewString(table, "charge_mode")
	c.CIType = field.NewString(table, "ci_type")
	c.CmcIP = field.NewString(table, "cmc_ip")
	c.CncIP = field.NewString(table, "cnc_ip")
	c.Comment = field.NewString(table, "comment")
	c.CostDepCasID = field.NewString(table, "cost_dep_cas_id")
	c.CPU = field.NewString(table, "cpu")
	c.CPUCount = field.NewInt(table, "cpu_count")
	c.CtcIP = field.NewString(table, "ctc_ip")
	c.CreateDate = field.NewString(table, "create_date")
	c.CreatedAt = field.NewString(table, "created_at")
	c.CreatedTime = field.NewString(table, "created_time")
	c.Deleted = field.NewString(table, "deleted")
	c.Department = field.NewString(table, "department")
	c.Description = field.NewString(table, "description")
	c.DeviceSpec = field.NewString(table, "device_spec")
	c.DockerCPUCount = field.NewString(table, "docker_cpu_count")
	c.Env = field.NewString(table, "env")
	c.ExpDate = field.NewString(table, "exp_date")
	c.ExpiredAt = field.NewString(table, "expired_at")
	c.ExternalID = field.NewString(table, "external_id")
	c.FloatIP = field.NewField(table, "float_ip")
	c.HardDisk = field.NewString(table, "harddisk")
	c.HostIP = field.NewField(table, "host_ip")
	c.HostType = field.NewString(table, "host_type")
	c.Hostname = field.NewString(table, "hostname")
	c.HostSN = field.NewString(table, "host_sn")
	c.HyperThreading = field.NewString(table, "hyper_threading")
	c.IDC = field.NewString(table, "idc")
	c.IloIP = field.NewString(table, "ilo_ip")
	c.Image = field.NewString(table, "image")
	c.ImageVersion = field.NewString(table, "image_version")
	c.InstanceID = field.NewString(table, "instance_id")
	c.IPv6 = field.NewField(table, "ipv6")
	c.ImportedAt = field.NewString(table, "imported_at")
	c.InScalingGroup = field.NewString(table, "in_scaling_group")
	c.InstanceType = field.NewString(table, "instance_type")
	c.InternetMaxBandwidthOut = field.NewInt(table, "internet_max_bandwidth_out")
	c.K8sCluster = field.NewString(table, "k8s_cluster")
	c.KernelVersion = field.NewString(table, "kernel_version")
	c.LogicCPUCount = field.NewInt(table, "logic_cpu_count")
	c.MinionNotCheck = field.NewString(table, "minion_not_check")
	c.Name = field.NewString(table, "name")
	c.Namespace = field.NewString(table, "namespace")
	c.NetOpen = field.NewString(table, "net_open")
	c.OpDuty = field.NewField(table, "op_duty")
	c.OpDutyBackup = field.NewField(table, "op_duty_backup")
	c.OpDutyMain = field.NewField(table, "op_duty_main")
	c.OpDutyStandby = field.NewField(table, "op_duty_standby")
	c.OsArch = field.NewString(table, "os_arch")
	c.OsType = field.NewString(table, "os_type")
	c.OsVersion = field.NewString(table, "os_version")
	c.PowerStates = field.NewString(table, "power_states")
	c.PrivateIP = field.NewField(table, "private_ip")
	c.PublicCloudID = field.NewString(table, "public_cloud_id")
	c.PublicCloudIDC = field.NewString(table, "public_cloud_idc")
	c.PrivateCloudIP = field.NewString(table, "private_cloud_ip")
	c.PrivateCloudType = field.NewString(table, "private_cloud_type")
	c.Rack = field.NewString(table, "rack")
	c.RAID = field.NewString(table, "raid")
	c.RAM = field.NewString(table, "ram")
	c.RAMSize = field.NewString(table, "ram_size")
	c.RdDutyMain = field.NewField(table, "rd_duty_main")
	c.RdDutyMember = field.NewField(table, "rd_duty_member")
	c.Region = field.NewString(table, "region")
	c.ResourceLimits = field.NewString(table, "resource_limits")
	c.ResourceRequests = field.NewString(table, "resource_requests")
	c.SecurityInfo = field.NewString(table, "security_info")
	c.Server = field.NewString(table, "server")
	c.ServerRoom = field.NewString(table, "server_room")
	c.SN = field.NewString(table, "sn")
	c.ShutdownBehavior = field.NewString(table, "shutdown_behavior")
	c.ShutdownMode = field.NewString(table, "shutdown_mode")
	c.Status = field.NewString(table, "status")
	c.SysDuty = field.NewField(table, "sys_duty")
	c.Tags = field.NewField(table, "tags")
	c.Throughput = field.NewInt(table, "throughput")
	c.TradeType = field.NewString(table, "trade_type")
	c.UpdateTime = field.NewString(table, "update_time")
	c.UpdatedAt = field.NewString(table, "updated_at")
	c.Use = field.NewString(table, "use")
	c.UUID = field.NewString(table, "uuid")
	c.VCPUCount = field.NewInt(table, "vcpu_count")
	c.VMemSize = field.NewInt(table, "vmem_size")
	c.VserverType = field.NewString(table, "vserver_type")
	c.ZabbixNotCheck = field.NewString(table, "zabbix_not_check")
	c.Zone = field.NewString(table, "zone")

	c.fillFieldMap()

	return c
}

func (c *cmdb2) WithContext(ctx context.Context) *cmdb2Do { return c.cmdb2Do.WithContext(ctx) }

func (c cmdb2) TableName() string { return c.cmdb2Do.TableName() }

func (c cmdb2) Alias() string { return c.cmdb2Do.Alias() }

func (c cmdb2) Columns(cols ...field.Expr) gen.Columns { return c.cmdb2Do.Columns(cols...) }

func (c *cmdb2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmdb2) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 102)
	c.fieldMap["id"] = c.ID
	c.fieldMap["inet"] = c.Inet
	c.fieldMap["app_cluster"] = c.AppCluster
	c.fieldMap["app_duty"] = c.AppDuty
	c.fieldMap["appid"] = c.AppID
	c.fieldMap["appname"] = c.AppName
	c.fieldMap["auto_renew"] = c.AutoRenew
	c.fieldMap["asset_id"] = c.AssetID
	c.fieldMap["asset_status"] = c.AssetStatus
	c.fieldMap["baoleiji_identity"] = c.BaoleijiIdentity
	c.fieldMap["beetle_service"] = c.BeetleService
	c.fieldMap["billing_type"] = c.BillingType
	c.fieldMap["brand"] = c.Brand
	c.fieldMap["business"] = c.Business
	c.fieldMap["business_env"] = c.BusinessEnv
	c.fieldMap["charge_mode"] = c.ChargeMode
	c.fieldMap["ci_type"] = c.CIType
	c.fieldMap["cmc_ip"] = c.CmcIP
	c.fieldMap["cnc_ip"] = c.CncIP
	c.fieldMap["comment"] = c.Comment
	c.fieldMap["cost_dep_cas_id"] = c.CostDepCasID
	c.fieldMap["cpu"] = c.CPU
	c.fieldMap["cpu_count"] = c.CPUCount
	c.fieldMap["ctc_ip"] = c.CtcIP
	c.fieldMap["create_date"] = c.CreateDate
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["created_time"] = c.CreatedTime
	c.fieldMap["deleted"] = c.Deleted
	c.fieldMap["department"] = c.Department
	c.fieldMap["description"] = c.Description
	c.fieldMap["device_spec"] = c.DeviceSpec
	c.fieldMap["docker_cpu_count"] = c.DockerCPUCount
	c.fieldMap["env"] = c.Env
	c.fieldMap["exp_date"] = c.ExpDate
	c.fieldMap["expired_at"] = c.ExpiredAt
	c.fieldMap["external_id"] = c.ExternalID
	c.fieldMap["float_ip"] = c.FloatIP
	c.fieldMap["harddisk"] = c.HardDisk
	c.fieldMap["host_ip"] = c.HostIP
	c.fieldMap["host_type"] = c.HostType
	c.fieldMap["hostname"] = c.Hostname
	c.fieldMap["host_sn"] = c.HostSN
	c.fieldMap["hyper_threading"] = c.HyperThreading
	c.fieldMap["idc"] = c.IDC
	c.fieldMap["ilo_ip"] = c.IloIP
	c.fieldMap["image"] = c.Image
	c.fieldMap["image_version"] = c.ImageVersion
	c.fieldMap["instance_id"] = c.InstanceID
	c.fieldMap["ipv6"] = c.IPv6
	c.fieldMap["imported_at"] = c.ImportedAt
	c.fieldMap["in_scaling_group"] = c.InScalingGroup
	c.fieldMap["instance_type"] = c.InstanceType
	c.fieldMap["internet_max_bandwidth_out"] = c.InternetMaxBandwidthOut
	c.fieldMap["k8s_cluster"] = c.K8sCluster
	c.fieldMap["kernel_version"] = c.KernelVersion
	c.fieldMap["logic_cpu_count"] = c.LogicCPUCount
	c.fieldMap["minion_not_check"] = c.MinionNotCheck
	c.fieldMap["name"] = c.Name
	c.fieldMap["namespace"] = c.Namespace
	c.fieldMap["net_open"] = c.NetOpen
	c.fieldMap["op_duty"] = c.OpDuty
	c.fieldMap["op_duty_backup"] = c.OpDutyBackup
	c.fieldMap["op_duty_main"] = c.OpDutyMain
	c.fieldMap["op_duty_standby"] = c.OpDutyStandby
	c.fieldMap["os_arch"] = c.OsArch
	c.fieldMap["os_type"] = c.OsType
	c.fieldMap["os_version"] = c.OsVersion
	c.fieldMap["power_states"] = c.PowerStates
	c.fieldMap["private_ip"] = c.PrivateIP
	c.fieldMap["public_cloud_id"] = c.PublicCloudID
	c.fieldMap["public_cloud_idc"] = c.PublicCloudIDC
	c.fieldMap["private_cloud_ip"] = c.PrivateCloudIP
	c.fieldMap["private_cloud_type"] = c.PrivateCloudType
	c.fieldMap["rack"] = c.Rack
	c.fieldMap["raid"] = c.RAID
	c.fieldMap["ram"] = c.RAM
	c.fieldMap["ram_size"] = c.RAMSize
	c.fieldMap["rd_duty_main"] = c.RdDutyMain
	c.fieldMap["rd_duty_member"] = c.RdDutyMember
	c.fieldMap["region"] = c.Region
	c.fieldMap["resource_limits"] = c.ResourceLimits
	c.fieldMap["resource_requests"] = c.ResourceRequests
	c.fieldMap["security_info"] = c.SecurityInfo
	c.fieldMap["server"] = c.Server
	c.fieldMap["server_room"] = c.ServerRoom
	c.fieldMap["sn"] = c.SN
	c.fieldMap["shutdown_behavior"] = c.ShutdownBehavior
	c.fieldMap["shutdown_mode"] = c.ShutdownMode
	c.fieldMap["status"] = c.Status
	c.fieldMap["sys_duty"] = c.SysDuty
	c.fieldMap["tags"] = c.Tags
	c.fieldMap["throughput"] = c.Throughput
	c.fieldMap["trade_type"] = c.TradeType
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["use"] = c.Use
	c.fieldMap["uuid"] = c.UUID
	c.fieldMap["vcpu_count"] = c.VCPUCount
	c.fieldMap["vmem_size"] = c.VMemSize
	c.fieldMap["vserver_type"] = c.VserverType
	c.fieldMap["zabbix_not_check"] = c.ZabbixNotCheck
	c.fieldMap["zone"] = c.Zone
}

func (c cmdb2) clone(db *gorm.DB) cmdb2 {
	c.cmdb2Do.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmdb2) replaceDB(db *gorm.DB) cmdb2 {
	c.cmdb2Do.ReplaceDB(db)
	return c
}

type cmdb2Do struct{ gen.DO }

func (c cmdb2Do) Debug() *cmdb2Do {
	return c.withDO(c.DO.Debug())
}

func (c cmdb2Do) WithContext(ctx context.Context) *cmdb2Do {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmdb2Do) ReadDB() *cmdb2Do {
	return c.Clauses(dbresolver.Read)
}

func (c cmdb2Do) WriteDB() *cmdb2Do {
	return c.Clauses(dbresolver.Write)
}

func (c cmdb2Do) Session(config *gorm.Session) *cmdb2Do {
	return c.withDO(c.DO.Session(config))
}

func (c cmdb2Do) Clauses(conds ...clause.Expression) *cmdb2Do {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmdb2Do) Returning(value interface{}, columns ...string) *cmdb2Do {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmdb2Do) Not(conds ...gen.Condition) *cmdb2Do {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmdb2Do) Or(conds ...gen.Condition) *cmdb2Do {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmdb2Do) Select(conds ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmdb2Do) Where(conds ...gen.Condition) *cmdb2Do {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmdb2Do) Order(conds ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmdb2Do) Distinct(cols ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmdb2Do) Omit(cols ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmdb2Do) Join(table schema.Tabler, on ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmdb2Do) LeftJoin(table schema.Tabler, on ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmdb2Do) RightJoin(table schema.Tabler, on ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmdb2Do) Group(cols ...field.Expr) *cmdb2Do {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmdb2Do) Having(conds ...gen.Condition) *cmdb2Do {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmdb2Do) Limit(limit int) *cmdb2Do {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmdb2Do) Offset(offset int) *cmdb2Do {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmdb2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *cmdb2Do {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmdb2Do) Unscoped() *cmdb2Do {
	return c.withDO(c.DO.Unscoped())
}

func (c cmdb2Do) Create(values ...*model.Cmdb2) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmdb2Do) CreateInBatches(values []*model.Cmdb2, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmdb2Do) Save(values ...*model.Cmdb2) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmdb2Do) First() (*model.Cmdb2, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb2), nil
	}
}

func (c cmdb2Do) Take() (*model.Cmdb2, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb2), nil
	}
}

func (c cmdb2Do) Last() (*model.Cmdb2, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb2), nil
	}
}

func (c cmdb2Do) Find() ([]*model.Cmdb2, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cmdb2), err
}

func (c cmdb2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cmdb2, err error) {
	buf := make([]*model.Cmdb2, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmdb2Do) FindInBatches(result *[]*model.Cmdb2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmdb2Do) Attrs(attrs ...field.AssignExpr) *cmdb2Do {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmdb2Do) Assign(attrs ...field.AssignExpr) *cmdb2Do {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmdb2Do) Joins(fields ...field.RelationField) *cmdb2Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmdb2Do) Preload(fields ...field.RelationField) *cmdb2Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmdb2Do) FirstOrInit() (*model.Cmdb2, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb2), nil
	}
}

func (c cmdb2Do) FirstOrCreate() (*model.Cmdb2, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb2), nil
	}
}

func (c cmdb2Do) FindByPage(offset int, limit int) (result []*model.Cmdb2, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmdb2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmdb2Do) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmdb2Do) Delete(models ...*model.Cmdb2) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmdb2Do) withDO(do gen.Dao) *cmdb2Do {
	c.DO = *do.(*gen.DO)
	return c
}
