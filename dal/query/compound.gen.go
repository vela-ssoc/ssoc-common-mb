// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb/dal/model"
)

func newCompound(db *gorm.DB, opts ...gen.DOOption) compound {
	_compound := compound{}

	_compound.compoundDo.UseDB(db, opts...)
	_compound.compoundDo.UseModel(&model.Compound{})

	tableName := _compound.compoundDo.TableName()
	_compound.ALL = field.NewAsterisk(tableName)
	_compound.ID = field.NewInt64(tableName, "id")
	_compound.Name = field.NewString(tableName, "name")
	_compound.Desc = field.NewString(tableName, "desc")
	_compound.Substances = field.NewField(tableName, "substances")
	_compound.Version = field.NewInt64(tableName, "version")
	_compound.CreatedID = field.NewInt64(tableName, "created_id")
	_compound.UpdatedID = field.NewInt64(tableName, "updated_id")
	_compound.CreatedAt = field.NewTime(tableName, "created_at")
	_compound.UpdatedAt = field.NewTime(tableName, "updated_at")

	_compound.fillFieldMap()

	return _compound
}

type compound struct {
	compoundDo compoundDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Desc       field.String
	Substances field.Field
	Version    field.Int64
	CreatedID  field.Int64
	UpdatedID  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (c compound) Table(newTableName string) *compound {
	c.compoundDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c compound) As(alias string) *compound {
	c.compoundDo.DO = *(c.compoundDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *compound) updateTableName(table string) *compound {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Desc = field.NewString(table, "desc")
	c.Substances = field.NewField(table, "substances")
	c.Version = field.NewInt64(table, "version")
	c.CreatedID = field.NewInt64(table, "created_id")
	c.UpdatedID = field.NewInt64(table, "updated_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *compound) WithContext(ctx context.Context) *compoundDo { return c.compoundDo.WithContext(ctx) }

func (c compound) TableName() string { return c.compoundDo.TableName() }

func (c compound) Alias() string { return c.compoundDo.Alias() }

func (c *compound) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *compound) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["desc"] = c.Desc
	c.fieldMap["substances"] = c.Substances
	c.fieldMap["version"] = c.Version
	c.fieldMap["created_id"] = c.CreatedID
	c.fieldMap["updated_id"] = c.UpdatedID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c compound) clone(db *gorm.DB) compound {
	c.compoundDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c compound) replaceDB(db *gorm.DB) compound {
	c.compoundDo.ReplaceDB(db)
	return c
}

type compoundDo struct{ gen.DO }

func (c compoundDo) Debug() *compoundDo {
	return c.withDO(c.DO.Debug())
}

func (c compoundDo) WithContext(ctx context.Context) *compoundDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c compoundDo) ReadDB() *compoundDo {
	return c.Clauses(dbresolver.Read)
}

func (c compoundDo) WriteDB() *compoundDo {
	return c.Clauses(dbresolver.Write)
}

func (c compoundDo) Session(config *gorm.Session) *compoundDo {
	return c.withDO(c.DO.Session(config))
}

func (c compoundDo) Clauses(conds ...clause.Expression) *compoundDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c compoundDo) Returning(value interface{}, columns ...string) *compoundDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c compoundDo) Not(conds ...gen.Condition) *compoundDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c compoundDo) Or(conds ...gen.Condition) *compoundDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c compoundDo) Select(conds ...field.Expr) *compoundDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c compoundDo) Where(conds ...gen.Condition) *compoundDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c compoundDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *compoundDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c compoundDo) Order(conds ...field.Expr) *compoundDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c compoundDo) Distinct(cols ...field.Expr) *compoundDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c compoundDo) Omit(cols ...field.Expr) *compoundDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c compoundDo) Join(table schema.Tabler, on ...field.Expr) *compoundDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c compoundDo) LeftJoin(table schema.Tabler, on ...field.Expr) *compoundDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c compoundDo) RightJoin(table schema.Tabler, on ...field.Expr) *compoundDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c compoundDo) Group(cols ...field.Expr) *compoundDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c compoundDo) Having(conds ...gen.Condition) *compoundDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c compoundDo) Limit(limit int) *compoundDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c compoundDo) Offset(offset int) *compoundDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c compoundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *compoundDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c compoundDo) Unscoped() *compoundDo {
	return c.withDO(c.DO.Unscoped())
}

func (c compoundDo) Create(values ...*model.Compound) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c compoundDo) CreateInBatches(values []*model.Compound, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c compoundDo) Save(values ...*model.Compound) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c compoundDo) First() (*model.Compound, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Compound), nil
	}
}

func (c compoundDo) Take() (*model.Compound, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Compound), nil
	}
}

func (c compoundDo) Last() (*model.Compound, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Compound), nil
	}
}

func (c compoundDo) Find() ([]*model.Compound, error) {
	result, err := c.DO.Find()
	return result.([]*model.Compound), err
}

func (c compoundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Compound, err error) {
	buf := make([]*model.Compound, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c compoundDo) FindInBatches(result *[]*model.Compound, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c compoundDo) Attrs(attrs ...field.AssignExpr) *compoundDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c compoundDo) Assign(attrs ...field.AssignExpr) *compoundDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c compoundDo) Joins(fields ...field.RelationField) *compoundDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c compoundDo) Preload(fields ...field.RelationField) *compoundDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c compoundDo) FirstOrInit() (*model.Compound, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Compound), nil
	}
}

func (c compoundDo) FirstOrCreate() (*model.Compound, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Compound), nil
	}
}

func (c compoundDo) FindByPage(offset int, limit int) (result []*model.Compound, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c compoundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c compoundDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c compoundDo) Delete(models ...*model.Compound) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *compoundDo) withDO(do gen.Dao) *compoundDo {
	c.DO = *do.(*gen.DO)
	return c
}
