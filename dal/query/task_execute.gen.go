// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/ssoc-common-mb/dal/model"
)

func newTaskExecute(db *gorm.DB, opts ...gen.DOOption) taskExecute {
	_taskExecute := taskExecute{}

	_taskExecute.taskExecuteDo.UseDB(db, opts...)
	_taskExecute.taskExecuteDo.UseModel(&model.TaskExecute{})

	tableName := _taskExecute.taskExecuteDo.TableName()
	_taskExecute.ALL = field.NewAsterisk(tableName)
	_taskExecute.ID = field.NewInt64(tableName, "id")
	_taskExecute.TaskID = field.NewInt64(tableName, "task_id")
	_taskExecute.Name = field.NewString(tableName, "name")
	_taskExecute.Intro = field.NewString(tableName, "intro")
	_taskExecute.Status = field.NewField(tableName, "status")
	_taskExecute.Finished = field.NewBool(tableName, "finished")
	_taskExecute.Code = field.NewString(tableName, "code")
	_taskExecute.CodeSHA1 = field.NewString(tableName, "code_sha1")
	_taskExecute.ContentQuote = field.NewField(tableName, "content_quote")
	_taskExecute.Cron = field.NewString(tableName, "cron")
	_taskExecute.SpecificTimes = field.NewField(tableName, "specific_times")
	_taskExecute.Timeout = field.NewField(tableName, "timeout")
	_taskExecute.PushSize = field.NewInt(tableName, "push_size")
	_taskExecute.Filters = field.NewField(tableName, "filters")
	_taskExecute.Excludes = field.NewField(tableName, "excludes")
	_taskExecute.CreatedBy = field.NewField(tableName, "created_by")
	_taskExecute.UpdatedBy = field.NewField(tableName, "updated_by")
	_taskExecute.CreatedAt = field.NewTime(tableName, "created_at")
	_taskExecute.UpdatedAt = field.NewTime(tableName, "updated_at")

	_taskExecute.fillFieldMap()

	return _taskExecute
}

type taskExecute struct {
	taskExecuteDo taskExecuteDo

	ALL           field.Asterisk
	ID            field.Int64  // ID
	TaskID        field.Int64  // 任务ID
	Name          field.String // 名字
	Intro         field.String // 简介
	Status        field.Field  // 执行状态
	Finished      field.Bool   // 是否结束
	Code          field.String // 执行代码
	CodeSHA1      field.String // 执行代码SHA1
	ContentQuote  field.Field  // 插件引用
	Cron          field.String // 定时任务表达式
	SpecificTimes field.Field  // 定点任务时间
	Timeout       field.Field  // 超时时间
	PushSize      field.Int    // 推送并发数
	Filters       field.Field  // 过滤节点
	Excludes      field.Field  // 排除节点
	CreatedBy     field.Field  // 任务创建者
	UpdatedBy     field.Field  // 任务创建者
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t taskExecute) Table(newTableName string) *taskExecute {
	t.taskExecuteDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskExecute) As(alias string) *taskExecute {
	t.taskExecuteDo.DO = *(t.taskExecuteDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskExecute) updateTableName(table string) *taskExecute {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TaskID = field.NewInt64(table, "task_id")
	t.Name = field.NewString(table, "name")
	t.Intro = field.NewString(table, "intro")
	t.Status = field.NewField(table, "status")
	t.Finished = field.NewBool(table, "finished")
	t.Code = field.NewString(table, "code")
	t.CodeSHA1 = field.NewString(table, "code_sha1")
	t.ContentQuote = field.NewField(table, "content_quote")
	t.Cron = field.NewString(table, "cron")
	t.SpecificTimes = field.NewField(table, "specific_times")
	t.Timeout = field.NewField(table, "timeout")
	t.PushSize = field.NewInt(table, "push_size")
	t.Filters = field.NewField(table, "filters")
	t.Excludes = field.NewField(table, "excludes")
	t.CreatedBy = field.NewField(table, "created_by")
	t.UpdatedBy = field.NewField(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *taskExecute) WithContext(ctx context.Context) *taskExecuteDo {
	return t.taskExecuteDo.WithContext(ctx)
}

func (t taskExecute) TableName() string { return t.taskExecuteDo.TableName() }

func (t taskExecute) Alias() string { return t.taskExecuteDo.Alias() }

func (t taskExecute) Columns(cols ...field.Expr) gen.Columns { return t.taskExecuteDo.Columns(cols...) }

func (t *taskExecute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskExecute) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.ID
	t.fieldMap["task_id"] = t.TaskID
	t.fieldMap["name"] = t.Name
	t.fieldMap["intro"] = t.Intro
	t.fieldMap["status"] = t.Status
	t.fieldMap["finished"] = t.Finished
	t.fieldMap["code"] = t.Code
	t.fieldMap["code_sha1"] = t.CodeSHA1
	t.fieldMap["content_quote"] = t.ContentQuote
	t.fieldMap["cron"] = t.Cron
	t.fieldMap["specific_times"] = t.SpecificTimes
	t.fieldMap["timeout"] = t.Timeout
	t.fieldMap["push_size"] = t.PushSize
	t.fieldMap["filters"] = t.Filters
	t.fieldMap["excludes"] = t.Excludes
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t taskExecute) clone(db *gorm.DB) taskExecute {
	t.taskExecuteDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskExecute) replaceDB(db *gorm.DB) taskExecute {
	t.taskExecuteDo.ReplaceDB(db)
	return t
}

type taskExecuteDo struct{ gen.DO }

func (t taskExecuteDo) Debug() *taskExecuteDo {
	return t.withDO(t.DO.Debug())
}

func (t taskExecuteDo) WithContext(ctx context.Context) *taskExecuteDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskExecuteDo) ReadDB() *taskExecuteDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskExecuteDo) WriteDB() *taskExecuteDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskExecuteDo) Session(config *gorm.Session) *taskExecuteDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskExecuteDo) Clauses(conds ...clause.Expression) *taskExecuteDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskExecuteDo) Returning(value interface{}, columns ...string) *taskExecuteDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskExecuteDo) Not(conds ...gen.Condition) *taskExecuteDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskExecuteDo) Or(conds ...gen.Condition) *taskExecuteDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskExecuteDo) Select(conds ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskExecuteDo) Where(conds ...gen.Condition) *taskExecuteDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskExecuteDo) Order(conds ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskExecuteDo) Distinct(cols ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskExecuteDo) Omit(cols ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskExecuteDo) Join(table schema.Tabler, on ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskExecuteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskExecuteDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskExecuteDo) Group(cols ...field.Expr) *taskExecuteDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskExecuteDo) Having(conds ...gen.Condition) *taskExecuteDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskExecuteDo) Limit(limit int) *taskExecuteDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskExecuteDo) Offset(offset int) *taskExecuteDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskExecuteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskExecuteDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskExecuteDo) Unscoped() *taskExecuteDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskExecuteDo) Create(values ...*model.TaskExecute) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskExecuteDo) CreateInBatches(values []*model.TaskExecute, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskExecuteDo) Save(values ...*model.TaskExecute) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskExecuteDo) First() (*model.TaskExecute, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecute), nil
	}
}

func (t taskExecuteDo) Take() (*model.TaskExecute, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecute), nil
	}
}

func (t taskExecuteDo) Last() (*model.TaskExecute, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecute), nil
	}
}

func (t taskExecuteDo) Find() ([]*model.TaskExecute, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskExecute), err
}

func (t taskExecuteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskExecute, err error) {
	buf := make([]*model.TaskExecute, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskExecuteDo) FindInBatches(result *[]*model.TaskExecute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskExecuteDo) Attrs(attrs ...field.AssignExpr) *taskExecuteDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskExecuteDo) Assign(attrs ...field.AssignExpr) *taskExecuteDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskExecuteDo) Joins(fields ...field.RelationField) *taskExecuteDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskExecuteDo) Preload(fields ...field.RelationField) *taskExecuteDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskExecuteDo) FirstOrInit() (*model.TaskExecute, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecute), nil
	}
}

func (t taskExecuteDo) FirstOrCreate() (*model.TaskExecute, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecute), nil
	}
}

func (t taskExecuteDo) FindByPage(offset int, limit int) (result []*model.TaskExecute, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskExecuteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskExecuteDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskExecuteDo) Delete(models ...*model.TaskExecute) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskExecuteDo) withDO(do gen.Dao) *taskExecuteDo {
	t.DO = *do.(*gen.DO)
	return t
}
