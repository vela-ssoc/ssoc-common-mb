// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb/dal/model"
)

func newTaskExecuteItem(db *gorm.DB, opts ...gen.DOOption) taskExecuteItem {
	_taskExecuteItem := taskExecuteItem{}

	_taskExecuteItem.taskExecuteItemDo.UseDB(db, opts...)
	_taskExecuteItem.taskExecuteItemDo.UseModel(&model.TaskExecuteItem{})

	tableName := _taskExecuteItem.taskExecuteItemDo.TableName()
	_taskExecuteItem.ALL = field.NewAsterisk(tableName)
	_taskExecuteItem.ID = field.NewInt64(tableName, "id")
	_taskExecuteItem.TaskID = field.NewInt64(tableName, "task_id")
	_taskExecuteItem.ExecID = field.NewInt64(tableName, "exec_id")
	_taskExecuteItem.MinionID = field.NewInt64(tableName, "minion_id")
	_taskExecuteItem.Inet = field.NewString(tableName, "inet")
	_taskExecuteItem.BrokerID = field.NewInt64(tableName, "broker_id")
	_taskExecuteItem.BrokerName = field.NewString(tableName, "broker_name")
	_taskExecuteItem.ManagerStatus = field.NewField(tableName, "manager_status")
	_taskExecuteItem.BrokerStatus = field.NewField(tableName, "broker_status")
	_taskExecuteItem.MinionStatus = field.NewField(tableName, "minion_status")
	_taskExecuteItem.Finished = field.NewBool(tableName, "finished")
	_taskExecuteItem.Succeed = field.NewBool(tableName, "succeed")
	_taskExecuteItem.ErrorCode = field.NewInt(tableName, "error_code")
	_taskExecuteItem.Result = field.NewBytes(tableName, "result")
	_taskExecuteItem.ExpiredAt = field.NewTime(tableName, "expired_at")
	_taskExecuteItem.CreatedAt = field.NewTime(tableName, "created_at")
	_taskExecuteItem.UpdatedAt = field.NewTime(tableName, "updated_at")

	_taskExecuteItem.fillFieldMap()

	return _taskExecuteItem
}

type taskExecuteItem struct {
	taskExecuteItemDo taskExecuteItemDo

	ALL           field.Asterisk
	ID            field.Int64
	TaskID        field.Int64
	ExecID        field.Int64
	MinionID      field.Int64
	Inet          field.String
	BrokerID      field.Int64
	BrokerName    field.String
	ManagerStatus field.Field
	BrokerStatus  field.Field
	MinionStatus  field.Field
	Finished      field.Bool
	Succeed       field.Bool
	ErrorCode     field.Int
	Result        field.Bytes
	ExpiredAt     field.Time
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t taskExecuteItem) Table(newTableName string) *taskExecuteItem {
	t.taskExecuteItemDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskExecuteItem) As(alias string) *taskExecuteItem {
	t.taskExecuteItemDo.DO = *(t.taskExecuteItemDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskExecuteItem) updateTableName(table string) *taskExecuteItem {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TaskID = field.NewInt64(table, "task_id")
	t.ExecID = field.NewInt64(table, "exec_id")
	t.MinionID = field.NewInt64(table, "minion_id")
	t.Inet = field.NewString(table, "inet")
	t.BrokerID = field.NewInt64(table, "broker_id")
	t.BrokerName = field.NewString(table, "broker_name")
	t.ManagerStatus = field.NewField(table, "manager_status")
	t.BrokerStatus = field.NewField(table, "broker_status")
	t.MinionStatus = field.NewField(table, "minion_status")
	t.Finished = field.NewBool(table, "finished")
	t.Succeed = field.NewBool(table, "succeed")
	t.ErrorCode = field.NewInt(table, "error_code")
	t.Result = field.NewBytes(table, "result")
	t.ExpiredAt = field.NewTime(table, "expired_at")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *taskExecuteItem) WithContext(ctx context.Context) *taskExecuteItemDo {
	return t.taskExecuteItemDo.WithContext(ctx)
}

func (t taskExecuteItem) TableName() string { return t.taskExecuteItemDo.TableName() }

func (t taskExecuteItem) Alias() string { return t.taskExecuteItemDo.Alias() }

func (t taskExecuteItem) Columns(cols ...field.Expr) gen.Columns {
	return t.taskExecuteItemDo.Columns(cols...)
}

func (t *taskExecuteItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskExecuteItem) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.ID
	t.fieldMap["task_id"] = t.TaskID
	t.fieldMap["exec_id"] = t.ExecID
	t.fieldMap["minion_id"] = t.MinionID
	t.fieldMap["inet"] = t.Inet
	t.fieldMap["broker_id"] = t.BrokerID
	t.fieldMap["broker_name"] = t.BrokerName
	t.fieldMap["manager_status"] = t.ManagerStatus
	t.fieldMap["broker_status"] = t.BrokerStatus
	t.fieldMap["minion_status"] = t.MinionStatus
	t.fieldMap["finished"] = t.Finished
	t.fieldMap["succeed"] = t.Succeed
	t.fieldMap["error_code"] = t.ErrorCode
	t.fieldMap["result"] = t.Result
	t.fieldMap["expired_at"] = t.ExpiredAt
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t taskExecuteItem) clone(db *gorm.DB) taskExecuteItem {
	t.taskExecuteItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskExecuteItem) replaceDB(db *gorm.DB) taskExecuteItem {
	t.taskExecuteItemDo.ReplaceDB(db)
	return t
}

type taskExecuteItemDo struct{ gen.DO }

func (t taskExecuteItemDo) Debug() *taskExecuteItemDo {
	return t.withDO(t.DO.Debug())
}

func (t taskExecuteItemDo) WithContext(ctx context.Context) *taskExecuteItemDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskExecuteItemDo) ReadDB() *taskExecuteItemDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskExecuteItemDo) WriteDB() *taskExecuteItemDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskExecuteItemDo) Session(config *gorm.Session) *taskExecuteItemDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskExecuteItemDo) Clauses(conds ...clause.Expression) *taskExecuteItemDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskExecuteItemDo) Returning(value interface{}, columns ...string) *taskExecuteItemDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskExecuteItemDo) Not(conds ...gen.Condition) *taskExecuteItemDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskExecuteItemDo) Or(conds ...gen.Condition) *taskExecuteItemDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskExecuteItemDo) Select(conds ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskExecuteItemDo) Where(conds ...gen.Condition) *taskExecuteItemDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskExecuteItemDo) Order(conds ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskExecuteItemDo) Distinct(cols ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskExecuteItemDo) Omit(cols ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskExecuteItemDo) Join(table schema.Tabler, on ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskExecuteItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskExecuteItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskExecuteItemDo) Group(cols ...field.Expr) *taskExecuteItemDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskExecuteItemDo) Having(conds ...gen.Condition) *taskExecuteItemDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskExecuteItemDo) Limit(limit int) *taskExecuteItemDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskExecuteItemDo) Offset(offset int) *taskExecuteItemDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskExecuteItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskExecuteItemDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskExecuteItemDo) Unscoped() *taskExecuteItemDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskExecuteItemDo) Create(values ...*model.TaskExecuteItem) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskExecuteItemDo) CreateInBatches(values []*model.TaskExecuteItem, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskExecuteItemDo) Save(values ...*model.TaskExecuteItem) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskExecuteItemDo) First() (*model.TaskExecuteItem, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecuteItem), nil
	}
}

func (t taskExecuteItemDo) Take() (*model.TaskExecuteItem, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecuteItem), nil
	}
}

func (t taskExecuteItemDo) Last() (*model.TaskExecuteItem, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecuteItem), nil
	}
}

func (t taskExecuteItemDo) Find() ([]*model.TaskExecuteItem, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskExecuteItem), err
}

func (t taskExecuteItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskExecuteItem, err error) {
	buf := make([]*model.TaskExecuteItem, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskExecuteItemDo) FindInBatches(result *[]*model.TaskExecuteItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskExecuteItemDo) Attrs(attrs ...field.AssignExpr) *taskExecuteItemDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskExecuteItemDo) Assign(attrs ...field.AssignExpr) *taskExecuteItemDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskExecuteItemDo) Joins(fields ...field.RelationField) *taskExecuteItemDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskExecuteItemDo) Preload(fields ...field.RelationField) *taskExecuteItemDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskExecuteItemDo) FirstOrInit() (*model.TaskExecuteItem, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecuteItem), nil
	}
}

func (t taskExecuteItemDo) FirstOrCreate() (*model.TaskExecuteItem, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskExecuteItem), nil
	}
}

func (t taskExecuteItemDo) FindByPage(offset int, limit int) (result []*model.TaskExecuteItem, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskExecuteItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskExecuteItemDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskExecuteItemDo) Delete(models ...*model.TaskExecuteItem) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskExecuteItemDo) withDO(do gen.Dao) *taskExecuteItemDo {
	t.DO = *do.(*gen.DO)
	return t
}
