// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb/dal/model"
)

func newCASConfig(db *gorm.DB, opts ...gen.DOOption) cASConfig {
	_cASConfig := cASConfig{}

	_cASConfig.cASConfigDo.UseDB(db, opts...)
	_cASConfig.cASConfigDo.UseModel(&model.CASConfig{})

	tableName := _cASConfig.cASConfigDo.TableName()
	_cASConfig.ALL = field.NewAsterisk(tableName)
	_cASConfig.ID = field.NewInt64(tableName, "id")
	_cASConfig.URL = field.NewString(tableName, "url")
	_cASConfig.Enabled = field.NewBool(tableName, "enabled")
	_cASConfig.CreatedAt = field.NewTime(tableName, "updated_at")
	_cASConfig.UpdatedAt = field.NewTime(tableName, "created_at")

	_cASConfig.fillFieldMap()

	return _cASConfig
}

type cASConfig struct {
	cASConfigDo cASConfigDo

	ALL       field.Asterisk
	ID        field.Int64
	URL       field.String
	Enabled   field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c cASConfig) Table(newTableName string) *cASConfig {
	c.cASConfigDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cASConfig) As(alias string) *cASConfig {
	c.cASConfigDo.DO = *(c.cASConfigDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cASConfig) updateTableName(table string) *cASConfig {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.URL = field.NewString(table, "url")
	c.Enabled = field.NewBool(table, "enabled")
	c.CreatedAt = field.NewTime(table, "updated_at")
	c.UpdatedAt = field.NewTime(table, "created_at")

	c.fillFieldMap()

	return c
}

func (c *cASConfig) WithContext(ctx context.Context) *cASConfigDo {
	return c.cASConfigDo.WithContext(ctx)
}

func (c cASConfig) TableName() string { return c.cASConfigDo.TableName() }

func (c cASConfig) Alias() string { return c.cASConfigDo.Alias() }

func (c cASConfig) Columns(cols ...field.Expr) gen.Columns { return c.cASConfigDo.Columns(cols...) }

func (c *cASConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cASConfig) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["url"] = c.URL
	c.fieldMap["enabled"] = c.Enabled
	c.fieldMap["updated_at"] = c.CreatedAt
	c.fieldMap["created_at"] = c.UpdatedAt
}

func (c cASConfig) clone(db *gorm.DB) cASConfig {
	c.cASConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cASConfig) replaceDB(db *gorm.DB) cASConfig {
	c.cASConfigDo.ReplaceDB(db)
	return c
}

type cASConfigDo struct{ gen.DO }

func (c cASConfigDo) Debug() *cASConfigDo {
	return c.withDO(c.DO.Debug())
}

func (c cASConfigDo) WithContext(ctx context.Context) *cASConfigDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cASConfigDo) ReadDB() *cASConfigDo {
	return c.Clauses(dbresolver.Read)
}

func (c cASConfigDo) WriteDB() *cASConfigDo {
	return c.Clauses(dbresolver.Write)
}

func (c cASConfigDo) Session(config *gorm.Session) *cASConfigDo {
	return c.withDO(c.DO.Session(config))
}

func (c cASConfigDo) Clauses(conds ...clause.Expression) *cASConfigDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cASConfigDo) Returning(value interface{}, columns ...string) *cASConfigDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cASConfigDo) Not(conds ...gen.Condition) *cASConfigDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cASConfigDo) Or(conds ...gen.Condition) *cASConfigDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cASConfigDo) Select(conds ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cASConfigDo) Where(conds ...gen.Condition) *cASConfigDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cASConfigDo) Order(conds ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cASConfigDo) Distinct(cols ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cASConfigDo) Omit(cols ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cASConfigDo) Join(table schema.Tabler, on ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cASConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cASConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cASConfigDo) Group(cols ...field.Expr) *cASConfigDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cASConfigDo) Having(conds ...gen.Condition) *cASConfigDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cASConfigDo) Limit(limit int) *cASConfigDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cASConfigDo) Offset(offset int) *cASConfigDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cASConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cASConfigDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cASConfigDo) Unscoped() *cASConfigDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cASConfigDo) Create(values ...*model.CASConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cASConfigDo) CreateInBatches(values []*model.CASConfig, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cASConfigDo) Save(values ...*model.CASConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cASConfigDo) First() (*model.CASConfig, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CASConfig), nil
	}
}

func (c cASConfigDo) Take() (*model.CASConfig, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CASConfig), nil
	}
}

func (c cASConfigDo) Last() (*model.CASConfig, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CASConfig), nil
	}
}

func (c cASConfigDo) Find() ([]*model.CASConfig, error) {
	result, err := c.DO.Find()
	return result.([]*model.CASConfig), err
}

func (c cASConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CASConfig, err error) {
	buf := make([]*model.CASConfig, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cASConfigDo) FindInBatches(result *[]*model.CASConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cASConfigDo) Attrs(attrs ...field.AssignExpr) *cASConfigDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cASConfigDo) Assign(attrs ...field.AssignExpr) *cASConfigDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cASConfigDo) Joins(fields ...field.RelationField) *cASConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cASConfigDo) Preload(fields ...field.RelationField) *cASConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cASConfigDo) FirstOrInit() (*model.CASConfig, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CASConfig), nil
	}
}

func (c cASConfigDo) FirstOrCreate() (*model.CASConfig, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CASConfig), nil
	}
}

func (c cASConfigDo) FindByPage(offset int, limit int) (result []*model.CASConfig, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cASConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cASConfigDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cASConfigDo) Delete(models ...*model.CASConfig) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cASConfigDo) withDO(do gen.Dao) *cASConfigDo {
	c.DO = *do.(*gen.DO)
	return c
}
