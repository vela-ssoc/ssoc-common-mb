// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/ssoc-common-mb/dal/model"
)

func newNTPConfig(db *gorm.DB, opts ...gen.DOOption) nTPConfig {
	_nTPConfig := nTPConfig{}

	_nTPConfig.nTPConfigDo.UseDB(db, opts...)
	_nTPConfig.nTPConfigDo.UseModel(&model.NTPConfig{})

	tableName := _nTPConfig.nTPConfigDo.TableName()
	_nTPConfig.ALL = field.NewAsterisk(tableName)
	_nTPConfig.ID = field.NewInt64(tableName, "id")
	_nTPConfig.Server = field.NewString(tableName, "server")
	_nTPConfig.LastedAt = field.NewTime(tableName, "lasted_at")

	_nTPConfig.fillFieldMap()

	return _nTPConfig
}

type nTPConfig struct {
	nTPConfigDo nTPConfigDo

	ALL      field.Asterisk
	ID       field.Int64  // ID
	Server   field.String // NTP服务器
	LastedAt field.Time   // 设置时间

	fieldMap map[string]field.Expr
}

func (n nTPConfig) Table(newTableName string) *nTPConfig {
	n.nTPConfigDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nTPConfig) As(alias string) *nTPConfig {
	n.nTPConfigDo.DO = *(n.nTPConfigDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nTPConfig) updateTableName(table string) *nTPConfig {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.Server = field.NewString(table, "server")
	n.LastedAt = field.NewTime(table, "lasted_at")

	n.fillFieldMap()

	return n
}

func (n *nTPConfig) WithContext(ctx context.Context) *nTPConfigDo {
	return n.nTPConfigDo.WithContext(ctx)
}

func (n nTPConfig) TableName() string { return n.nTPConfigDo.TableName() }

func (n nTPConfig) Alias() string { return n.nTPConfigDo.Alias() }

func (n nTPConfig) Columns(cols ...field.Expr) gen.Columns { return n.nTPConfigDo.Columns(cols...) }

func (n *nTPConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nTPConfig) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 3)
	n.fieldMap["id"] = n.ID
	n.fieldMap["server"] = n.Server
	n.fieldMap["lasted_at"] = n.LastedAt
}

func (n nTPConfig) clone(db *gorm.DB) nTPConfig {
	n.nTPConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nTPConfig) replaceDB(db *gorm.DB) nTPConfig {
	n.nTPConfigDo.ReplaceDB(db)
	return n
}

type nTPConfigDo struct{ gen.DO }

func (n nTPConfigDo) Debug() *nTPConfigDo {
	return n.withDO(n.DO.Debug())
}

func (n nTPConfigDo) WithContext(ctx context.Context) *nTPConfigDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nTPConfigDo) ReadDB() *nTPConfigDo {
	return n.Clauses(dbresolver.Read)
}

func (n nTPConfigDo) WriteDB() *nTPConfigDo {
	return n.Clauses(dbresolver.Write)
}

func (n nTPConfigDo) Session(config *gorm.Session) *nTPConfigDo {
	return n.withDO(n.DO.Session(config))
}

func (n nTPConfigDo) Clauses(conds ...clause.Expression) *nTPConfigDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nTPConfigDo) Returning(value interface{}, columns ...string) *nTPConfigDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nTPConfigDo) Not(conds ...gen.Condition) *nTPConfigDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nTPConfigDo) Or(conds ...gen.Condition) *nTPConfigDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nTPConfigDo) Select(conds ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nTPConfigDo) Where(conds ...gen.Condition) *nTPConfigDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nTPConfigDo) Order(conds ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nTPConfigDo) Distinct(cols ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nTPConfigDo) Omit(cols ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nTPConfigDo) Join(table schema.Tabler, on ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nTPConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nTPConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nTPConfigDo) Group(cols ...field.Expr) *nTPConfigDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nTPConfigDo) Having(conds ...gen.Condition) *nTPConfigDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nTPConfigDo) Limit(limit int) *nTPConfigDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nTPConfigDo) Offset(offset int) *nTPConfigDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nTPConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *nTPConfigDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nTPConfigDo) Unscoped() *nTPConfigDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nTPConfigDo) Create(values ...*model.NTPConfig) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nTPConfigDo) CreateInBatches(values []*model.NTPConfig, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nTPConfigDo) Save(values ...*model.NTPConfig) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nTPConfigDo) First() (*model.NTPConfig, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NTPConfig), nil
	}
}

func (n nTPConfigDo) Take() (*model.NTPConfig, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NTPConfig), nil
	}
}

func (n nTPConfigDo) Last() (*model.NTPConfig, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NTPConfig), nil
	}
}

func (n nTPConfigDo) Find() ([]*model.NTPConfig, error) {
	result, err := n.DO.Find()
	return result.([]*model.NTPConfig), err
}

func (n nTPConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NTPConfig, err error) {
	buf := make([]*model.NTPConfig, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nTPConfigDo) FindInBatches(result *[]*model.NTPConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nTPConfigDo) Attrs(attrs ...field.AssignExpr) *nTPConfigDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nTPConfigDo) Assign(attrs ...field.AssignExpr) *nTPConfigDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nTPConfigDo) Joins(fields ...field.RelationField) *nTPConfigDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nTPConfigDo) Preload(fields ...field.RelationField) *nTPConfigDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nTPConfigDo) FirstOrInit() (*model.NTPConfig, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NTPConfig), nil
	}
}

func (n nTPConfigDo) FirstOrCreate() (*model.NTPConfig, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NTPConfig), nil
	}
}

func (n nTPConfigDo) FindByPage(offset int, limit int) (result []*model.NTPConfig, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nTPConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nTPConfigDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nTPConfigDo) Delete(models ...*model.NTPConfig) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nTPConfigDo) withDO(do gen.Dao) *nTPConfigDo {
	n.DO = *do.(*gen.DO)
	return n
}
