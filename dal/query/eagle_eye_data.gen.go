// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/ssoc-common-mb/dal/model"
)

func newEagleEyeData(db *gorm.DB, opts ...gen.DOOption) eagleEyeData {
	_eagleEyeData := eagleEyeData{}

	_eagleEyeData.eagleEyeDataDo.UseDB(db, opts...)
	_eagleEyeData.eagleEyeDataDo.UseModel(&model.EagleEyeData{})

	tableName := _eagleEyeData.eagleEyeDataDo.TableName()
	_eagleEyeData.ALL = field.NewAsterisk(tableName)
	_eagleEyeData.ID = field.NewInt64(tableName, "id")
	_eagleEyeData.MinionID = field.NewInt64(tableName, "minion_id")
	_eagleEyeData.Inet = field.NewString(tableName, "inet")
	_eagleEyeData.Path = field.NewString(tableName, "path")
	_eagleEyeData.Data = field.NewBytes(tableName, "data")
	_eagleEyeData.CreatedAt = field.NewTime(tableName, "created_at")
	_eagleEyeData.UpdatedAt = field.NewTime(tableName, "updated_at")

	_eagleEyeData.fillFieldMap()

	return _eagleEyeData
}

type eagleEyeData struct {
	eagleEyeDataDo eagleEyeDataDo

	ALL       field.Asterisk
	ID        field.Int64
	MinionID  field.Int64
	Inet      field.String
	Path      field.String
	Data      field.Bytes
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (e eagleEyeData) Table(newTableName string) *eagleEyeData {
	e.eagleEyeDataDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eagleEyeData) As(alias string) *eagleEyeData {
	e.eagleEyeDataDo.DO = *(e.eagleEyeDataDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eagleEyeData) updateTableName(table string) *eagleEyeData {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.MinionID = field.NewInt64(table, "minion_id")
	e.Inet = field.NewString(table, "inet")
	e.Path = field.NewString(table, "path")
	e.Data = field.NewBytes(table, "data")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *eagleEyeData) WithContext(ctx context.Context) *eagleEyeDataDo {
	return e.eagleEyeDataDo.WithContext(ctx)
}

func (e eagleEyeData) TableName() string { return e.eagleEyeDataDo.TableName() }

func (e eagleEyeData) Alias() string { return e.eagleEyeDataDo.Alias() }

func (e eagleEyeData) Columns(cols ...field.Expr) gen.Columns {
	return e.eagleEyeDataDo.Columns(cols...)
}

func (e *eagleEyeData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eagleEyeData) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["minion_id"] = e.MinionID
	e.fieldMap["inet"] = e.Inet
	e.fieldMap["path"] = e.Path
	e.fieldMap["data"] = e.Data
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e eagleEyeData) clone(db *gorm.DB) eagleEyeData {
	e.eagleEyeDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eagleEyeData) replaceDB(db *gorm.DB) eagleEyeData {
	e.eagleEyeDataDo.ReplaceDB(db)
	return e
}

type eagleEyeDataDo struct{ gen.DO }

func (e eagleEyeDataDo) Debug() *eagleEyeDataDo {
	return e.withDO(e.DO.Debug())
}

func (e eagleEyeDataDo) WithContext(ctx context.Context) *eagleEyeDataDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eagleEyeDataDo) ReadDB() *eagleEyeDataDo {
	return e.Clauses(dbresolver.Read)
}

func (e eagleEyeDataDo) WriteDB() *eagleEyeDataDo {
	return e.Clauses(dbresolver.Write)
}

func (e eagleEyeDataDo) Session(config *gorm.Session) *eagleEyeDataDo {
	return e.withDO(e.DO.Session(config))
}

func (e eagleEyeDataDo) Clauses(conds ...clause.Expression) *eagleEyeDataDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eagleEyeDataDo) Returning(value interface{}, columns ...string) *eagleEyeDataDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eagleEyeDataDo) Not(conds ...gen.Condition) *eagleEyeDataDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eagleEyeDataDo) Or(conds ...gen.Condition) *eagleEyeDataDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eagleEyeDataDo) Select(conds ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eagleEyeDataDo) Where(conds ...gen.Condition) *eagleEyeDataDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eagleEyeDataDo) Order(conds ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eagleEyeDataDo) Distinct(cols ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eagleEyeDataDo) Omit(cols ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eagleEyeDataDo) Join(table schema.Tabler, on ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eagleEyeDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eagleEyeDataDo) RightJoin(table schema.Tabler, on ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eagleEyeDataDo) Group(cols ...field.Expr) *eagleEyeDataDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eagleEyeDataDo) Having(conds ...gen.Condition) *eagleEyeDataDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eagleEyeDataDo) Limit(limit int) *eagleEyeDataDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eagleEyeDataDo) Offset(offset int) *eagleEyeDataDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eagleEyeDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *eagleEyeDataDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eagleEyeDataDo) Unscoped() *eagleEyeDataDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eagleEyeDataDo) Create(values ...*model.EagleEyeData) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eagleEyeDataDo) CreateInBatches(values []*model.EagleEyeData, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eagleEyeDataDo) Save(values ...*model.EagleEyeData) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eagleEyeDataDo) First() (*model.EagleEyeData, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EagleEyeData), nil
	}
}

func (e eagleEyeDataDo) Take() (*model.EagleEyeData, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EagleEyeData), nil
	}
}

func (e eagleEyeDataDo) Last() (*model.EagleEyeData, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EagleEyeData), nil
	}
}

func (e eagleEyeDataDo) Find() ([]*model.EagleEyeData, error) {
	result, err := e.DO.Find()
	return result.([]*model.EagleEyeData), err
}

func (e eagleEyeDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EagleEyeData, err error) {
	buf := make([]*model.EagleEyeData, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eagleEyeDataDo) FindInBatches(result *[]*model.EagleEyeData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eagleEyeDataDo) Attrs(attrs ...field.AssignExpr) *eagleEyeDataDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eagleEyeDataDo) Assign(attrs ...field.AssignExpr) *eagleEyeDataDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eagleEyeDataDo) Joins(fields ...field.RelationField) *eagleEyeDataDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eagleEyeDataDo) Preload(fields ...field.RelationField) *eagleEyeDataDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eagleEyeDataDo) FirstOrInit() (*model.EagleEyeData, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EagleEyeData), nil
	}
}

func (e eagleEyeDataDo) FirstOrCreate() (*model.EagleEyeData, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EagleEyeData), nil
	}
}

func (e eagleEyeDataDo) FindByPage(offset int, limit int) (result []*model.EagleEyeData, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eagleEyeDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eagleEyeDataDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eagleEyeDataDo) Delete(models ...*model.EagleEyeData) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eagleEyeDataDo) withDO(do gen.Dao) *eagleEyeDataDo {
	e.DO = *do.(*gen.DO)
	return e
}
