// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb/dal/model"
)

func newGridfsFile(db *gorm.DB, opts ...gen.DOOption) gridfsFile {
	_gridfsFile := gridfsFile{}

	_gridfsFile.gridfsFileDo.UseDB(db, opts...)
	_gridfsFile.gridfsFileDo.UseModel(&model.GridfsFile{})

	tableName := _gridfsFile.gridfsFileDo.TableName()
	_gridfsFile.ALL = field.NewAsterisk(tableName)
	_gridfsFile.ID = field.NewInt64(tableName, "id")
	_gridfsFile.Name = field.NewString(tableName, "name")
	_gridfsFile.Size = field.NewInt64(tableName, "size")
	_gridfsFile.Checksum = field.NewString(tableName, "name")
	_gridfsFile.CreatedAt = field.NewTime(tableName, "updated_at")

	_gridfsFile.fillFieldMap()

	return _gridfsFile
}

type gridfsFile struct {
	gridfsFileDo gridfsFileDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Size      field.Int64
	Checksum  field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g gridfsFile) Table(newTableName string) *gridfsFile {
	g.gridfsFileDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gridfsFile) As(alias string) *gridfsFile {
	g.gridfsFileDo.DO = *(g.gridfsFileDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gridfsFile) updateTableName(table string) *gridfsFile {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.Size = field.NewInt64(table, "size")
	g.Checksum = field.NewString(table, "name")
	g.CreatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *gridfsFile) WithContext(ctx context.Context) *gridfsFileDo {
	return g.gridfsFileDo.WithContext(ctx)
}

func (g gridfsFile) TableName() string { return g.gridfsFileDo.TableName() }

func (g gridfsFile) Alias() string { return g.gridfsFileDo.Alias() }

func (g gridfsFile) Columns(cols ...field.Expr) gen.Columns { return g.gridfsFileDo.Columns(cols...) }

func (g *gridfsFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gridfsFile) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["size"] = g.Size
	g.fieldMap["name"] = g.Checksum
	g.fieldMap["updated_at"] = g.CreatedAt
}

func (g gridfsFile) clone(db *gorm.DB) gridfsFile {
	g.gridfsFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gridfsFile) replaceDB(db *gorm.DB) gridfsFile {
	g.gridfsFileDo.ReplaceDB(db)
	return g
}

type gridfsFileDo struct{ gen.DO }

func (g gridfsFileDo) Debug() *gridfsFileDo {
	return g.withDO(g.DO.Debug())
}

func (g gridfsFileDo) WithContext(ctx context.Context) *gridfsFileDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gridfsFileDo) ReadDB() *gridfsFileDo {
	return g.Clauses(dbresolver.Read)
}

func (g gridfsFileDo) WriteDB() *gridfsFileDo {
	return g.Clauses(dbresolver.Write)
}

func (g gridfsFileDo) Session(config *gorm.Session) *gridfsFileDo {
	return g.withDO(g.DO.Session(config))
}

func (g gridfsFileDo) Clauses(conds ...clause.Expression) *gridfsFileDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gridfsFileDo) Returning(value interface{}, columns ...string) *gridfsFileDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gridfsFileDo) Not(conds ...gen.Condition) *gridfsFileDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gridfsFileDo) Or(conds ...gen.Condition) *gridfsFileDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gridfsFileDo) Select(conds ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gridfsFileDo) Where(conds ...gen.Condition) *gridfsFileDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gridfsFileDo) Order(conds ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gridfsFileDo) Distinct(cols ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gridfsFileDo) Omit(cols ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gridfsFileDo) Join(table schema.Tabler, on ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gridfsFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gridfsFileDo) RightJoin(table schema.Tabler, on ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gridfsFileDo) Group(cols ...field.Expr) *gridfsFileDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gridfsFileDo) Having(conds ...gen.Condition) *gridfsFileDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gridfsFileDo) Limit(limit int) *gridfsFileDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gridfsFileDo) Offset(offset int) *gridfsFileDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gridfsFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gridfsFileDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gridfsFileDo) Unscoped() *gridfsFileDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gridfsFileDo) Create(values ...*model.GridfsFile) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gridfsFileDo) CreateInBatches(values []*model.GridfsFile, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gridfsFileDo) Save(values ...*model.GridfsFile) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gridfsFileDo) First() (*model.GridfsFile, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridfsFile), nil
	}
}

func (g gridfsFileDo) Take() (*model.GridfsFile, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridfsFile), nil
	}
}

func (g gridfsFileDo) Last() (*model.GridfsFile, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridfsFile), nil
	}
}

func (g gridfsFileDo) Find() ([]*model.GridfsFile, error) {
	result, err := g.DO.Find()
	return result.([]*model.GridfsFile), err
}

func (g gridfsFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GridfsFile, err error) {
	buf := make([]*model.GridfsFile, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gridfsFileDo) FindInBatches(result *[]*model.GridfsFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gridfsFileDo) Attrs(attrs ...field.AssignExpr) *gridfsFileDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gridfsFileDo) Assign(attrs ...field.AssignExpr) *gridfsFileDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gridfsFileDo) Joins(fields ...field.RelationField) *gridfsFileDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gridfsFileDo) Preload(fields ...field.RelationField) *gridfsFileDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gridfsFileDo) FirstOrInit() (*model.GridfsFile, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridfsFile), nil
	}
}

func (g gridfsFileDo) FirstOrCreate() (*model.GridfsFile, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridfsFile), nil
	}
}

func (g gridfsFileDo) FindByPage(offset int, limit int) (result []*model.GridfsFile, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gridfsFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gridfsFileDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gridfsFileDo) Delete(models ...*model.GridfsFile) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gridfsFileDo) withDO(do gen.Dao) *gridfsFileDo {
	g.DO = *do.(*gen.DO)
	return g
}
